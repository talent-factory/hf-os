#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void analyze_memory_layout(int* stack_var, int* heap_var, int* static_var) {
    printf("Speicheradressanalyse:\n");
    printf("---------------------\n");
    printf("Stack-Variable: %p\n", (void*)stack_var);
    printf("Heap-Variable: %p\n", (void*)heap_var);
    printf("Statische Variable: %p\n", (void*)static_var);

    unsigned long diff1 = (unsigned long)stack_var - (unsigned long)heap_var;
    unsigned long diff2 = (unsigned long)heap_var - (unsigned long)static_var;
    printf("Stack - Heap Differenz: %lu Bytes\n", diff1);
    printf("Heap - Statisch Differenz: %lu Bytes\n", diff2);

    printf("\nWachstumsrichtungen:\n");
    int a = 1;
    int b = 2;
    if (&b > &a) {
        printf("Stack wächst nach oben\n");
    } else {
        printf("Stack wächst nach unten\n");
    }
    printf("\n");
}

int main() {
    static int static_variable = 100;
    int stack_variable = 200;
    int* heap_variable = (int*)malloc(sizeof(int));
    if (heap_variable == NULL) {
        printf("Fehler bei der Speicherzuweisung\n");
        return 1;
    }
    *heap_variable = 300;
    analyze_memory_layout(&stack_variable, heap_variable, &static_variable);

    for (int i = 0; i < 5; i++) {
        void* leak = malloc(1024); // absichtlich nicht freigegeben
        (void)leak; // Warnung vermeiden
    }

    free(heap_variable);
    return 0;
}

//Die Adressen zeigen, dass Stack, Heap und statische Variablen in verschiedenen Speicherbereichen liegen → das ist Absicht vom Betriebssystem zur Trennung von Datenarten

//Die Stack-Wachstumsrichtung sagt dir, ob lokale Variablen bei Funktionsaufrufen von hohen zu niedrigen Adressen oder umgekehrt angelegt werden

//Das Speicherleck zeigt, dass reservierter Heap-Speicher ohne free() verloren geht → wird vom Betriebssystem meist erst beim Prozessende freigegeben

//Viele kleine Leaks = Speicherverbrauch steigt → kann langfristig zu Problemen führen, vor allem bei Servern oder Daemons
