Aufgabe 5: Praktische Aufgabe - Speicherverwaltung

-------------------------------------------
üîß Vervollst√§ndigter Code:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void analyze_memory_layout(int* stack_var, int* heap_var, int* static_var) {
    printf("Speicheradressanalyse:\n");
    printf("---------------------\n");
    printf("Stack-Variable: %p\n", (void*)stack_var);
    printf("Heap-Variable: %p\n", (void*)heap_var);
    printf("Statische Variable: %p\n", (void*)static_var);

    // Berechnen Sie die Differenzen
    unsigned long diff_stack_heap = (unsigned long)stack_var - (unsigned long)heap_var;
    unsigned long diff_stack_static = (unsigned long)stack_var - (unsigned long)static_var;
    unsigned long diff_heap_static = (unsigned long)heap_var - (unsigned long)static_var;

    printf("Differenz Stack - Heap: %lu Bytes\n", diff_stack_heap);
    printf("Differenz Stack - Static: %lu Bytes\n", diff_stack_static);
    printf("Differenz Heap - Static: %lu Bytes\n", diff_heap_static);

    printf("\nWachstumsrichtungen:\n");

    // Zwei lokale Variablen deklarieren
    int local_var1 = 1;
    int local_var2 = 2;
    printf("Adresse von local_var1: %p\n", (void*)&local_var1);
    printf("Adresse von local_var2: %p\n", (void*)&local_var2);

    if (&local_var2 > &local_var1) {
        printf("Der Stack w√§chst nach oben (h√∂here Adressen)\n");
    } else {
        printf("Der Stack w√§chst nach unten (niedrigere Adressen)\n");
    }

    printf("\n");
}

int main() {
    // Statische Variable
    static int static_variable = 100;

    // Stack-Variable
    int stack_variable = 200;

    // Heap-Variable
    int* heap_variable = (int*)malloc(sizeof(int));
    if (heap_variable == NULL) {
        printf("Fehler bei der Speicherzuweisung\n");
        return 1;
    }
    *heap_variable = 300;

    // Speicherlayout analysieren
    analyze_memory_layout(&stack_variable, heap_variable, &static_variable);

    // Speicherleck demonstrieren
    for (int i = 0; i < 5; i++) {
        int* leak = (int*)malloc(100);  // Speicher wird zugewiesen, aber nie freigegeben
    }

    // Speicher freigeben
    free(heap_variable);

    return 0;
}
-------------------------------------------
Speicheradressanalyse:
---------------------
Stack-Variable: 0x7fff0e624ab0
Heap-Variable: 0x59791b21d2a0
Statische Variable: 0x597919706010

Adressunterschiede:
Stack - Heap: 42356753594384 bytes
Stack - Static: 42356782000800 bytes
Heap - Static: 28406416 bytes

Wachstumsrichtungen:
Adresse von local_var1: 0x7fff0e624a78
Adresse von local_var2: 0x7fff0e624a7c
Stack w√§chst nach oben (h√∂here Adressen)


 Beschreibung der Ausgabe:

1-Speicheradressanalyse:
- Stack-Variable, Heap-Variable und Statische Variable werden an unterschiedlichen Adressen angezeigt. Diese Adressen liegen weit auseinander, was darauf hinweist, dass sie in verschiedenen Speicherbereichen liegen:
    - Stack (lokale Variablen)
    - Heap (dynamische Allokation)
    - statischer Bereich (globale/statische Variablen)

2-Adressdifferenzen:
- Die Differenzen zwischen Stack, Heap und Static zeigen die relativen Abst√§nde im Speicher. Das hilft zu verstehen, wie das Betriebssystem den Speicher organisiert.

3- Wachstumsrichtung:
- Durch den Vergleich von zwei lokalen Variablen wird festgestellt, ob der Stack nach oben oder nach unten w√§chst (typischerweise nach unten auf vielen Architekturen).

-------------------------------------------
 Analyse:

- Die Stack-Variable liegt im Stack-Bereich.
- Die Heap-Variable liegt im Heap-Bereich (√ºblicherweise h√∂her als der Stack).
- Die statische Variable liegt im statischen/globalen Bereich (oft im Data-Segment).

Diese Trennung sorgt f√ºr Speicherisolierung und bessere Verwaltung durch das Betriebssystem.

-------------------------------------------
 Speicherleck:

Im for-Loop werden Speicherbl√∂cke mit malloc() zugewiesen, aber es erfolgt kein free(). Das f√ºhrt zu einem Speicherleck, weil:
- Der Zeiger ‚Äûleak‚Äú √ºberschreibt sich in jedem Schleifendurchlauf.
- Nach Ende des Programms gibt es keine M√∂glichkeit mehr, diese Speicherbl√∂cke freizugeben.

Das Betriebssystem gibt zwar den gesamten Speicher nach Programmende frei, aber in langen laufenden Programmen (z.B. Server) f√ºhrt das zu Ressourcenverschwendung und m√∂glichen Abst√ºrzen.

Ein Betriebssystem selbst kann Speicherlecks nicht automatisch erkennen und beheben, aber Tools wie Valgrind helfen Entwicklern, solche Probleme zu finden.

-------------------------------------------
 Zusammenfassung:

- Stack: w√§chst meistens nach unten.
- Heap: w√§chst meistens nach oben.
- Statischer Speicher: bleibt fixiert.
- Speicherlecks entstehen, wenn malloc ohne free genutzt wird.
- Die Trennung
