1.Befehl mkdir -p test/subdir && cd test
Mkdir erstellt das Verzeichis test. Der Befehl subdir mit der Option -p wird ebenfalls eine Parentdirectory erstellt.

2. Befehl echo "Inhalt-$(date +%s)" > original.txt
Der Befehl echo gibt aus was dahinter steht und wird mit > in die Datei original.txt kopiert. Mit der Funktion $(date +%s) wird die aktuelle Zeit ausgegeben. Also im Origin wird ungefähr die Inhalt-Zeit in Sekunden ausgegeben.

3. Befehl ln -s original.txt symlink.txt
Hier wird ein symlink erstellt, welcher von symlink.txt auf original.txt geht. Der symlink ist die Verlinkung, bei der Veränderung von einem Dokument wird auch das andere Dokument abgeändert.

4. Befehl ln original.txt hardlink.txt
Dieser Befehl  erstellt einen Hardlink von hardlink.txt zu original.txt. Das heisst es ist dieselbe Datei, weil beides auf den gleichen Speicherort verweist.

5. Befehl chmod 640 original.txt
Damit wird die Berechtigung von original.txt verändert. Der Besitzer hat lesen/schreiben Berechtigung, die Gruppe hat read Berechtigungen und alle anderen keinen Zugriff auf die Datei original.txt.

6. Befehl touch -d "2 days ago" original.txt
Ändert den Zeitstempel der Datei auf ein Datum von vor zwei Tagen (Modifikationszeit).

7. Befehl ls -la
ls gibt die Verzeichnisstruktur aus, wie sie jetzt ist.

insgesamt 20
drwxrwxr-x 3 vmadmin vmadmin 4096 Mai 10 08:47 .
drwxr-xr-x 4 vmadmin vmadmin 4096 Mai 10 08:46 ..
-rw-r----- 2 vmadmin vmadmin   18 Mai  8 08:35 hardlink.txt
-rw-r----- 2 vmadmin vmadmin   18 Mai  8 08:35 original.txt
drwxrwxr-x 2 vmadmin vmadmin 4096 Mai 10 08:34 subdir
lrwxrwxrwx 1 vmadmin vmadmin   12 Mai 10 08:34 symlink.txt -> original.txt


8. Befehl echo "Neuer Inhalt" > original.txt
Überschreibt den Inhalt der Datei original.txt mit dem String "Neuer Inhalt". Da original.txt und hardlink.txt dieselbe Inode teilen, ändert sich der Inhalt in beiden Dateien. Der symbolische Link symlink.txt zeigt immer noch auf den Pfad original.txt

9. Befehl cat symlink.txt hardlink.txt
Cat gibt die Inhalte des symlink.txt sowie des hardlink.txt an. Die Ausgabe, zeigt 2 mal "Neuer Inhalt" an.

10. Befehl mv original.txt ../original.txt
Verschiebt die Datei original.txt eine Ebene höher. Im selben Dateisystem ist mv ein Verzeichnisoperation (kein kopieren): Entfernt den Eintrag original.txt aus test/ (verringert Link-Zähler). Erstellt einen neuen Eintrag in ../.

Der Link-Count sinkt in test/, bleibt aber gleich, da hardlink.txt in test/ bleibt. Hardlink (hardlink.txt) bleibt intakt.

Symlink (symlink.txt) ist jetzt gebrochen, weil original.txt im aktuellen Verzeichnis fehlt.

11. Befehl cat symlink.txt hardlink.txt 2>&1 
symlink.txt verweist auf original.txt, aber dieser Pfad existiert nicht mehr im aktuellen Verzeichnis. hardlink.txt funktioniert weiter. Die ausgabe ist die folgende:
cat: symlink.txt: No such file or directory
Neuer Inhalt

Unterschied:
Hardlinks sind robust, weil sie direkt mit dem Dateisystem verbunden sind – sie zeigen direkt auf eine Inode der Datei, also auf deren eigentlichen Speicherplatz. Solange die Inode existiert, bleibt der Hardlink gültig, egal wie oft der ursprüngliche Dateiname oder Pfad verschoben wird.

Symlinks dagegen sind Pfadverweise. Wenn der Pfad geändert oder gelöscht wird, zeigt der symbolische Link ins Nichts. Da er in diesem Nichts keine Datei findet gibt der Symlink danach einen Fehler aus. Symlinks sind flexibler, weil sie auch auf Verzeichnisse oder entfernte Systeme zeigen können – aber Symlinks sind ebenfalls fehleranfälliger.

Mögliche Fehler:
Der wichtigste Fehler hier ist, dass symlink.txt nicht mehr funktioniert, weil sein Zielpfad nicht mehr existiert. Wenn man cat oder andere Programme darauf anwendet, bekommt man einen "No such file or directory"-Fehler. Der Hardlink bleibt dagegen völlig unbeeindruckt.


Bonusfrage:
Wenn du versuchst, einen Hardlink zwischen zwei verschiedenen Dateisystemen zu erstellen – etwa von einer Partition zur anderen –, schlägt das fehl. Der Befehl ln wird dann abbrechen mit einem Fehler.
Das liegt daran, dass eine Inode nur innerhalb eines Dateisystems eindeutig ist – Hardlinks können nur innerhalb desselben Dateisystems erstellt werden.

Symbolische Links haben dieses Problem nicht. Da sie einfach nur einen Pfad speichern (wie ein Shortcut), funktionieren sie auch über Systemgrenzen hinweg – du kannst also einen Symlink von /home/user/ auf eine Datei in /mnt/data/ erstellen, ganz problemlos. 
