Erweiterte Datei Operationen

1. mkdir -p test/subdir && cd test
- mkdir -p: erstellt das Verzeichnis test und darin subdir
- Mit -p wird die Erstellung von verschachtelten Verzeichnissen erlaubt, ohne Fehler, falls sie schon existieren
- && verbindet das erste Command mit dem zweiten command
- cd test: wechselt ins Verzeichnis test

Verwendete Konzepte: Verzeichnisstruktur, Pfade, Navigation im Dateisystem

2. echo "Inhalt-$(date +%s)" > original.txt
- Erstellt (oder überschreibt) die Datei original.txt
- Der Befehl date +%s gibt die aktuelle Zeit als Unix-Zeitstempel aus
- > leitet die Ausgabe in die Datei um

Verwendete Konzepte: Dateierstellung, Standardausgabe, Umleitung

3. ln -s original.txt symlink.txt
- Erstellt einen symbolischen Link namens symlink.txt, der auf original.txt verweist
- Symbolische Links enthalten den Pfad zur Zieldatei, nicht deren Inhalt

Verwendete Konzepte: Symbolische Links (soft Links), Pfadausflösung

4. ln original.txt hardlink.txt
- Erstellt einen harten Link namens hardlink.txt, der denselben Inode wie original.txt nutzt
- Beide verweisen auf denselben Speicherbereich, sind vollständig gleichwertig

Verwendete Konzepte: Harte Links, Inodes, Dateiverweise

5. chmod 640 original.txt
- Setzt die Rechte auf: Besitzer darf lesen und schreiben, Gruppe darf lesen, andere dürfen nichts
- 6 = rw-, 4 = r--, 0 = ---
Konzepte: Dateiberechtigungen Schutzmechanismen im Dateisystem

6. touch -d "2 days ago" original.txt
- Ändert den Modifikationszeitstempel (mtime) von original.txt auf „vor zwei Tagen“
- Da harte Links den Inode teilen, betrifft dies auch hardlink.txt

Konzept: Zeitstempel(atime, mtime, ctime), Metadatenmanipulation

7. ls -la
- Listet alle Dateien im aktuelle Verzeichnis auf
- -a zeigt auch "vertsteckte" Dateien an
- -l gibt zusätzliche Informationen über die aufgelisteten Files aus

OUTPUT: 
  test git:(hfi2024b/ryan-rüegg) ✗ ls -la 
insgesamt 20
drwxrwxr-x 3 vmadmin vmadmin 4096 Mai 10 11:00 .
drwxr-xr-x 4 vmadmin vmadmin 4096 Mai 10 10:54 ..
-rw-r----- 2 vmadmin vmadmin   18 Mai  8 11:03 hardlink.txt
-rw-r----- 2 vmadmin vmadmin   18 Mai  8 11:03 original.txt
drwxrwxr-x 2 vmadmin vmadmin 4096 Mai 10 10:54 subdir
lrwxrwxrwx 1 vmadmin vmadmin   12 Mai 10 10:58 symlink.txt -> original.txt

Erste Spalte, zeigt den Dateityp und die Rechte. 
Zweite Spalte, anzahl der Links(Hardlinks).
Drtite Spalte, Owner(Benutzername) des Objektes.
Vierte Spalte, Gruppe des Owners
5. Spalte, Dateigrösse.
6. Spalte, letzter Änderungszeitpunkt(mtime).
7. spalte, dateinamen.


Welche Unterschiede bestehen zwischen den drei Dateien bezüglich Inode, Berechtigungen und Zeitstempel?
| Datei        | Inode               | Rechte       | Typ               | mtime          |
| ------------ | ------------------- | ------------ | ----------------- | -------------- |
| original.txt | gleich wie hardlink | `-rw-r-----` | reguläre Datei    | vor 2 Tagen    |
| hardlink.txt | gleich wie original | `-rw-r-----` | reguläre Datei    | vor 2 Tagen    |
| symlink.txt  | eigener Inode       | `lrwxrwxrwx` | symbolischer Link | Zeit des Links |

original.txt und hardlink.txt teilen sich den Inode, da ein harter Link direkt auf denselben Inode zeigt.

symlink.txt hat einen eigenen Inode, da er nur einen Pfad-String enthält.

8. echo "Neuer Inhalt" > original.txt
- Überschreibt original.txt und damit auch den Inhalt des Inodes, den sich hardlink.txt teilt
- symlink.txt zeigt weiterhin auf den Dateinamen original.txt

9. cat symlink.txt hardlink.txt
OUTPUT: 
➜  test git:(hfi2024b/ryan-rüegg) ✗ cat symlink.txt hardlink.txt
Neuer Inhalt
Neuer Inhalt

- symlink.txt verweist erfolgreich auf original.txt
- hardlink.txt zeigt ebenfalls auf denselben Inode – also gleicher Inhalt

10. mv original.txt ../original.txt
- Verschiebt original.txt in das übergeordnete Verzeichnis
- Der Inode bleibt erhalten, nur der Verzeichniseintrag wird verschoben

Folgen: 
- hardlink.txt bleibt im aktuellen Verzeichnis mit Zugriff auf denselben Inode
- symlink.txt verweist auf original.txt im aktuellen Verzeichnis – dieser Pfad ist nun ungültig, da die Datei verschoben wurde

11. cat symlink.txt hardlink.txt 2>&1
OUTPUT: 
➜  test git:(hfi2024b/ryan-rüegg) ✗ cat symlink.txt hardlink.txt 2>&1
cat: symlink.txt: Datei oder Verzeichnis nicht gefunden
Neuer Inhalt

- symlink.txt ist gebrochen (broken link), da original.txt nicht mehr im aktuellen Verzeichnis existiert
- hardlink.txt bleibt funktional, da es den Inode direkt referenziert



Bonusfrage: 
Symbolische Links funktionieren über Dateisystemgrenzen hinweg, da sie lediglich Pfadnamen speichern.
Harte Links hingegen können nur innerhalb desselben Dateisystems erstellt werden, da sie direkt auf Inodes verweisen, und Inodes sind nur lokal im Dateisystem eindeutig.

Beispiel:
Ein harter Link von /home/user/file1 nach /mnt/usb/file1_link schlägt fehl, wenn /mnt/usb ein anderes Dateisystem ist.
Ein symbolischer Link ist dagegen problemlos möglich.
