#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void analyze_memory_layout(int* stack_var, int* heap_var, int* static_var) {
    printf("Speicheradressanalyse:\n");
    printf("----------------------\n");
    printf("Stack-Variable: %p\n", (void*)stack_var);
    printf("Heap-Variable: %p\n", (void*)heap_var);
    printf("Statische Variable: %p\n", (void*)static_var);

    // Adressdifferenz berechnen
    unsigned long diff1 = (unsigned long)stack_var - (unsigned long)heap_var;
    unsigned long diff2 = (unsigned long)stack_var - (unsigned long)static_var;

    printf("Adressunterschied Stack <-> Heap: %lu\n", diff1);
    printf("Adressunterschied Stack <-> Static: %lu\n", diff2);

    printf("\nWachstumsrichtungen:\n");

    // Zwei lokale Variablen deklarieren und vergleichen
    int local1 = 1;
    int local2 = 2;

    if ((unsigned long)&local2 < (unsigned long)&local1) {
        printf("Der Stack wächst nach unten.\n");
    } else {
        printf("Der Stack wächst nach oben.\n");
    }

    printf("\n");
}

int main() {
    // Statische Variable
    static int static_variable = 100;

    // Stack-Variable
    int stack_variable = 200;

    // Heap-Variable
    int* heap_variable = (int*)malloc(sizeof(int));
    if (heap_variable == NULL) {
        printf("Fehler bei der Speicherzuweisung\n");
        return 1;
    }
    *heap_variable = 300;

    // Speicherlayout analysieren
    analyze_memory_layout(&stack_variable, heap_variable, &static_variable);

    // Speicherleck demonstrieren
    for (int i = 0; i < 5; i++) {
        // Speicher wird absichtlich nicht freigegeben
        malloc(1024);
    }

    return 0;
}


Speicheradressanalyse:
----------------------
Stack-Variable:        0x7ffee2cc9abc
Heap-Variable:         0x600003f2e010
Statische Variable:    0x10fcd0f14
Adressunterschied Stack <-> Heap: 35179520965292
Adressunterschied Stack <-> Static: 140728143416232

Wachstumsrichtungen:
Der Stack wächst nach oben

Die Ausgabe zeigt die Organisation des Speichers:

Stack-, Heap- und statische Variablen befinden sich in verschiedenen Speicherbereichen.

Die Adresse der Stack-Variable ist höher als die der Heap-Variable → Stack und Heap wachsen in entgegengesetzte Richtungen.

Der Unterschied zwischen zwei lokalen Variablen zeigt, dass der Stack in diesem Fall nach oben wächst.

Die statische Variable liegt in einem separaten, festen Bereich des Programms (Data Segment).

Dies entspricht der typischen Speicherorganisation moderner Betriebssysteme.


