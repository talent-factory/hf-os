#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>

void print_file_metadata(const char* filename) {
    struct stat file_info;
    // stat() aufrufen und auf Fehler prüfen
    if (stat(filename, &file_info) != 0) {
        perror("stat");
        return;
    }

    printf("Metadaten für Datei: %s\n", filename);
    printf("------------------------\n");
    printf("Dateigröße: %ld Bytes\n", file_info.st_size);
    printf("Inode-Nummer: %ld\n", file_info.st_ino);
    printf("Anzahl der Hardlinks: %ld\n", file_info.st_nlink);
    printf("Zugriffsrechte (octal): %o\n", file_info.st_mode & 0777);

    char time_str[30];
    strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_atime));
    printf("Letzter Zugriff: %s\n", time_str);
    strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_mtime));
    printf("Letzte Änderung: %s\n", time_str);
    printf("\n");
}

int main() {
    const char* filename = "testdatei.txt";
    const char* content = "Dies ist ein Test für Dateioperationen.\n"
                          "Wir untersuchen, wie Dateisysteme Metadaten verwalten.\n";

    // Datei erstellen und schreiben
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei");
        return 1;
    }
    fprintf(file, "%s", content);
    fclose(file);

    // Metadaten vor der Änderung anzeigen
    printf("Metadaten vor der Änderung:\n");
    print_file_metadata(filename);

    // Datei öffnen und Text anhängen
    file = fopen(filename, "a");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei zum Anhängen");
        return 1;
    }
    // Weiteren Text hinzufügen
    fprintf(file, "Zusätzlicher Text nach der ersten Analyse.\n");
    fclose(file);

    // Metadaten nach der Änderung anzeigen
    printf("Metadaten nach der Änderung:\n");
    print_file_metadata(filename);

    // Hardlink erstellen
    const char* hardlink_name = "testdatei_hardlink.txt";
    if (link(filename, hardlink_name) != 0) {
        perror("Fehler beim Erstellen des Hardlinks");
    } else {
        printf("Hardlink erstellt: %s\n", hardlink_name);
    }

    // Metadaten des Hardlinks anzeigen
    printf("Metadaten des Hardlinks:\n");
    print_file_metadata(hardlink_name);

    // Dateien löschen
    remove(filename);
    remove(hardlink_name);

    return 0;
}

1. Frage:
Beschreiben Sie die Ausgabe des Programms. Welche Änderungen an den Metadaten beobachten Sie nach dem Anhängen von Text?

Antwort:
Nach dem Anhängen von Text ändern sich die folgenden Metadaten:

Dateigröße (st_size) nimmt zu, da zusätzliche Daten geschrieben wurden.

Der Zeitstempel der letzten Änderung (st_mtime) wird aktualisiert.

Die Inode-Nummer bleibt gleich, da es sich um dieselbe Datei handelt.

Nach dem Erstellen des Hardlinks steigt die Anzahl der Hardlinks (st_nlink) von 1 auf 2.

Die Metadaten des Hardlinks sind identisch mit denen der Originaldatei, da beide denselben Inode verwenden.

2. Frage:
Erklären Sie den Unterschied zwischen der Inode-Nummer und dem Dateinamen. Was bedeutet es, wenn zwei Dateien die gleiche Inode-Nummer haben?

Antwort:
Ein Dateiname ist nur ein Verweis (Pfadname) auf die Datei im Verzeichnis. Die Inode-Nummer identifiziert die tatsächlichen Metadaten und Speicherblöcke der Datei im Dateisystem.

Wenn zwei Dateien die gleiche Inode-Nummer haben, bedeutet das, dass sie denselben physikalischen Inhalt teilen – sie sind Hardlinks auf dieselbe Datei. Änderungen an einer Datei wirken sich automatisch auch auf die andere aus, da sie dieselbe Datenstruktur verwenden.

3. Frage:
Wie würde sich das Verhalten ändern, wenn Sie statt eines Hardlinks einen symbolischen Link (Symlink) erstellen würden? Beschreiben Sie die Unterschiede in Bezug auf Metadaten und Verhalten beim Löschen der Originaldatei.

Antwort:
Ein symbolischer Link (Symlink) ist eine separate Datei, die nur den Pfad zur Originaldatei enthält. Im Gegensatz zum Hardlink hat ein Symlink eine eigene Inode-Nummer und eigene Metadaten.

Unterschiede:

Der Symlink hat eigene Metadaten, z. B. eigene Zugriffsrechte und Zeitstempel.

Beim Löschen der Originaldatei zeigt der Symlink ins Leere (Broken Link), während ein Hardlink weiterhin funktioniert.

Änderungen am Inhalt wirken sich beim Symlink ebenfalls aus – aber nur, solange die Originaldatei existiert.
