Hier meine Antwort:

Interne Fragmentierung:
Ein Programm bekommt mehr Speicher als es braucht. Der Rest bleibt ungenutzt.
Beispiel: Ein Prozess braucht 18 KB, bekommt aber 20 KB. Die 2 KB gehen verloren.

Externe Fragmentierung:
Der freie Speicher ist verteilt und nicht zusammenh√§ngend. Gro√üe Programme passen nicht rein.
Beispiel: Es gibt 3 freie Bl√∂cke (4 KB, 3 KB, 2 KB), aber ein Prozess braucht 8 KB. Kein Block ist gro√ü genug.

üß† Zwei Strategien zur Vermeidung von Speicherfragmentierung
1. Paging (Seitentechnik)

Der Speicher wird in gleich gro√üe Bl√∂cke (Seiten) aufgeteilt. Programme bekommen nur die Seiten, die sie brauchen.

    ‚úÖ Vorteile:

        Keine externe Fragmentierung

        Einfache Verwaltung durch feste Gr√∂√üe

    ‚ùå Nachteile:

        Interne Fragmentierung m√∂glich (wenn Seite nicht ganz gef√ºllt ist)

        Verwaltungsaufwand durch Seitentabellen

	2. Compaction (Speicherverdichtung)

Freier Speicher wird zusammengelegt, indem Prozesse verschoben werden.

    ‚úÖ Vorteile:

        Gro√üe Speicherbl√∂cke entstehen

        Bessere Nutzung des Hauptspeichers

    ‚ùå Nachteile:

        Sehr aufwendig und langsam

        Ben√∂tigt viel Rechenleistung
