Interne Fragmentierung entsteht, wenn einem Prozess ein größerer Speicherblock zugewiesen wird, als er tatsächlich benötigt. Der nicht genutzte Teil innerhalb dieses Blocks bleibt unbrauchbar, obwohl er eigentlich frei ist. Ein typisches Beispiel dafür ist ein Prozess, der 6 KB benötigt, aber aus Verwaltungsgründen 8 KB erhält – die restlichen 2 KB gehen verloren.

Externe Fragmentierung hingegen tritt auf, wenn im Hauptspeicher zwar genug freier Speicher vorhanden ist, dieser aber in viele kleine, nicht zusammenhängende Blöcke aufgeteilt ist. Dadurch ist es nicht möglich, größeren Prozessen zusammenhängenden Speicherplatz zuzuweisen, obwohl insgesamt genug freier Speicher vorhanden wäre. Man kann sich das wie viele kleine Lücken in einem Bücherregal vorstellen, in die aber kein dickes Buch mehr passt.

Strategien zur Vermeidung von Speicherfragmentierung:
Eine gängige Methode, um vor allem externe Fragmentierung zu vermeiden, ist die Verwendung von virtuellem Speicher mit Paging. Dabei wird der Speicher in gleich große Seiten aufgeteilt (zum Beispiel 4 KB pro Seite), die dann beliebig im physischen Speicher abgelegt werden können. Dadurch wird zusammenhängender Speicher nicht mehr benötigt, was die externe Fragmentierung komplett eliminiert. Ein Nachteil ist allerdings, dass es zu interner Fragmentierung innerhalb der Seiten kommen kann, wenn ein Prozess z. B. nur einen kleinen Teil der letzten Seite nutzt. Außerdem benötigt das System zusätzliche Verwaltungsstrukturen wie Seitentabellen, was den Ressourcenverbrauch erhöht.

Eine weitere Möglichkeit ist die sogenannte Speicherverdichtung. Hierbei werden belegte Speicherblöcke im Arbeitsspeicher verschoben, um die freien Bereiche zusammenzufassen. So entsteht wieder ein größerer, zusammenhängender Speicherbereich. Diese Methode ist effektiv gegen externe Fragmentierung, aber sehr aufwendig: Sie verbraucht viele Ressourcen, da ganze Speicherbereiche physisch verschoben werden müssen. Zudem funktioniert sie nur dann sinnvoll, wenn das Betriebssystem mit virtuellen Adressen arbeitet, weil sonst die laufenden Programme durch die Adressverschiebung gestört würden.
