Erklärung der Befehle

mkdir -p test/subdir && cd test
Erstellt ein Verzeichnis namens test mit einem Unterordner subdir.

-p sorgt dafür, dass alle Verzeichnisse im Pfad erstellt werden, falls sie noch nicht existieren.

Danach wird in das Verzeichnis test gewechselt.
Konzepte: Verzeichnisstruktur, Verzeichnisbaum.

echo "Inhalt-$(date +%s)" > original.txt
Erstellt eine Datei original.txt mit einem Text, der die aktuelle Unix-Zeit (in Sekunden) enthält.

Der >-Operator schreibt den Inhalt in die Datei (überschreibt ggf. bestehende Datei).
Konzepte: Datei erstellen, Standardausgabe umleiten.

ln -s original.txt symlink.txt
Erstellt einen symbolischen Link namens symlink.txt, der auf original.txt zeigt.

Symbolische Links sind wie Verknüpfungen – sie enthalten nur den Pfad zur Zieldatei.
Konzepte: Symbolischer Link, Pfadreferenz.

ln original.txt hardlink.txt
Erstellt einen Hardlink zur Datei original.txt, mit dem Namen hardlink.txt.

Beide zeigen auf dieselbe Inode (also denselben Datenblock), haben aber unterschiedliche Namen.
Konzepte: Inode, Hardlink, Mehrfachbenennung derselben Datei.

chmod 640 original.txt
Setzt die Zugriffsrechte:

Besitzer: lesen und schreiben (6 = 4 + 2)

Gruppe: lesen (4)

Andere: keine Rechte (0)
Konzepte: Dateirechte, chmod, Zugriffssteuerung.

touch -d "2 days ago" original.txt
Ändert den Zeitstempel (mtime) von original.txt auf „vor zwei Tagen“.
Konzepte: Zeitstempel ändern, Metadaten einer Datei.

ls -la
Zeigt alle Dateien im aktuellen Verzeichnis inklusive versteckter Dateien mit detaillierten Infos.

Dazu gehören: Rechte, Anzahl der Links, Eigentümer, Gruppe, Grösse, Zeitstempel, Name.
insgesamt 20
drwxrwxr-x  3 vmadmin vmadmin 4096 Mai 17 11:26 .
drwxr-x--- 22 vmadmin vmadmin 4096 Mai 17 11:26 ..
-rw-r-----  2 vmadmin vmadmin   18 Mai 15 11:26 hardlink.txt
-rw-r-----  2 vmadmin vmadmin   18 Mai 15 11:26 original.txt
drwxrwxr-x  2 vmadmin vmadmin 4096 Mai 17 11:26 subdir
lrwxrwxrwx  1 vmadmin vmadmin   12 Mai 17 11:26 symlink.txt -> original.txt


Analyse:
1. Bedeutung der einzelnen Spalten

In der Beispielzeile
-rw-r----- 2 vmadmin vmadmin 18 Mai 15 11:26 original.txt
zeigt die erste Spalte die Art der Datei und die Zugriffsrechte. Das Minuszeichen steht für eine normale Datei. Die folgenden Buchstaben zeigen die Rechte für den Besitzer, die Gruppe und andere Benutzer. In diesem Fall darf der Besitzer lesen und schreiben, die Gruppe darf nur lesen, und andere haben keinen Zugriff.

Die zweite Spalte zeigt die Anzahl der Links auf diese Inode an. Der Wert 2 bedeutet, dass zwei Dateinamen auf dieselbe Inode zeigen, was bei Hardlinks der Fall ist.

Die dritte und vierte Spalte geben an, welchem Benutzer und welcher Gruppe die Datei gehört. Hier sind beide Einträge „vmadmin“.

Die fünfte Spalte gibt die Grösse der Datei in Bytes an. In diesem Fall hat die Datei eine Grösse von 18 Bytes.

Die sechste bis achte Spalte zeigen das Änderungsdatum und die Uhrzeit an, zu der die Datei zuletzt verändert wurde.

Die neunte Spalte enthält den Namen der Datei.

2. Unterschiede zwischen original.txt, hardlink.txt und symlink.txt

Die Dateien original.txt und hardlink.txt haben beide denselben Inode, was daran erkennbar ist, dass ihre Linkanzahl 2 beträgt. Das bedeutet, beide verweisen auf denselben Speicherbereich im Dateisystem. Der symbolische Link symlink.txt hingegen hat eine eigene Inode und eine Linkanzahl von 1. Er speichert nur den Pfad zur Zieldatei und nicht den Inhalt selbst.

Bezüglich des Dateityps handelt es sich bei original.txt und hardlink.txt um normale Dateien. symlink.txt ist ein symbolischer Link, was man daran erkennt, dass in der Rechteanzeige ein „l“ ganz am Anfang steht und dass der Eintrag mit einem Pfeil (->) auf das Ziel zeigt.

Bei den Zugriffsrechten haben original.txt und hardlink.txt die Rechte „rw-r-----“. Der Besitzer darf lesen und schreiben, die Gruppe darf lesen, andere Benutzer haben keinen Zugriff. Der symbolische Link zeigt „rwxrwxrwx“ an, was jedoch nur die Rechte auf den Link selbst sind. Die tatsächlichen Rechte beim Zugriff hängen vom Ziel der Verknüpfung ab.

Die Zeitstempel der drei Dateien liegen sehr nah beieinander, da sie kurz nacheinander erstellt wurden.

3. Bedeutung der Inode-Verwendung

Die Dateien original.txt und hardlink.txt zeigen auf dieselbe Inode. Das bedeutet, sie sind technisch gesehen dieselbe Datei mit zwei Namen. Eine Änderung an einer dieser Dateien wirkt sich immer auf beide aus, weil der Inhalt an einer einzigen Stelle im Dateisystem liegt.

Der symbolische Link symlink.txt hat dagegen eine eigene Inode. Er enthält lediglich den Verweis auf den Pfad „original.txt“. Wenn diese Zieldatei verschoben oder gelöscht wird, funktioniert der Symlink nicht mehr, da der gespeicherte Pfad ins Leere zeigt. Der Hardlink hingegen bleibt weiterhin gültig, weil er unabhängig vom Pfad auf die Datenstruktur im Dateisystem verweist.

Zusätzliche Hinweise

Auch die Einträge „.“ (aktuelles Verzeichnis) und „..“ (übergeordnetes Verzeichnis) erscheinen in der Ausgabe. Das Unterverzeichnis „subdir“ ist ein reguläres Verzeichnis mit den Rechten „drwxrwxr-x“, was bedeutet, dass Besitzer und Gruppe Lese-, Schreib- und Ausführungsrechte haben, andere Benutzer dürfen lesen und ausführen.


Unterschiede zwischen Hardlink, Symlink und Originaldatei

Die Datei „original.txt“ und der Hardlink „hardlink.txt“ greifen auf denselben Inhalt im Dateisystem zu. Sie teilen sich dieselbe Inode und besitzen daher identische Eigenschaften wie Zugriffsrechte, Zeitstempel und Dateigrösse. Der symbolische Link „symlink.txt“ hingegen ist eine eigenständige Datei mit eigener Inode. Er speichert lediglich den Pfad zur Originaldatei, nicht deren Inhalt.

Inode-Nummern und ihre Bedeutung

Hardlinks zeigen auf die gleiche Inode, wodurch sie technisch dieselbe Datei darstellen. Die Inode-Zahl ist gleich, weil beide Dateinamen auf denselben Speicherbereich verweisen. Beim Symlink ist das anders – er besitzt eine eigene Inode, da er nur einen Pfad referenziert. Deshalb ist die Inode-Zahl bei symbolischen Links unterschiedlich.

Ausgabe von „cat symlink.txt hardlink.txt“

Beide Dateien geben denselben Text aus, nämlich den neuen Inhalt, der zuvor mit dem „echo“-Befehl in „original.txt“ geschrieben wurde. Das liegt daran, dass „hardlink.txt“ direkt auf dieselbe Inode wie „original.txt“ zeigt, während „symlink.txt“ über den gespeicherten Pfad auf die Datei zugreift, die zu diesem Zeitpunkt noch vorhanden ist.

Ausgabe von „cat symlink.txt hardlink.txt 2>&1“ nach dem Verschieben

Nachdem „original.txt“ mit „mv“ in ein anderes Verzeichnis verschoben wurde, ist sie unter dem ursprünglichen Pfad nicht mehr auffindbar. „symlink.txt“ verweist jedoch weiterhin auf diesen Pfad und schlägt deshalb beim Zugriff fehl. Es wird eine Fehlermeldung ausgegeben. „hardlink.txt“ bleibt funktionsfähig, da er nicht vom Pfad abhängt, sondern direkt auf die Inode zeigt, die weiterhin im Dateisystem existiert.

Fazit

Ein Hardlink bleibt auch dann gültig, wenn die Originaldatei verschoben oder gelöscht wird, da er unabhängig vom Dateinamen funktioniert. Ein symbolischer Link ist dagegen pfadabhängig und bricht, sobald sich der Zielpfad ändert oder nicht mehr existiert.

Bonus Frage:
Wenn die Dateien auf verschiedenen Partitionen liegen, kann man keinen Hardlink machen, weil der direkte Zugriff auf die Inode nur innerhalb eines Dateisystems funktioniert. Der Befehl würde mit einem Fehler abbrechen. Ein Symlink funktioniert auch über mehrere Dateisysteme, weil er nur den Pfad speichert. Wenn der Pfad noch stimmt, klappt der Zugriff – sonst nicht.






