#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>

void print_file_metadata(const char* filename) {
    struct stat file_info;
    // Rufen Sie stat() auf, um Informationen über die Datei zu erhalten
    if (stat(filename, &file_info) != 0) {
        perror("stat");
        return;
    }
    
    printf("Metadaten für Datei: %s\n", filename);
    printf("------------------------\n");
    
    // Ausgabe der Metadaten
    printf("Dateigröße: %ld Bytes\n", file_info.st_size);
    printf("Inode-Nummer: %lu\n", (unsigned long)file_info.st_ino);
    printf("Anzahl der Hardlinks: %lu\n", (unsigned long)file_info.st_nlink);
    printf("Zugriffsrechte (Oktal): %o\n", file_info.st_mode & 0777);
    
    // Formatierung und Ausgabe der Zeitstempel
    char atime_str[30];
    char mtime_str[30];
    strftime(atime_str, sizeof(atime_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_atime));
    strftime(mtime_str, sizeof(mtime_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_mtime));
    
    printf("Letzter Zugriff: %s\n", atime_str);
    printf("Letzte Änderung: %s\n", mtime_str);
    
    printf("\n");
}

int main() {
    const char* filename = "testdatei.txt";
    const char* content = "Dies ist ein Test für Dateioperationen.\n"
                         "Wir untersuchen, wie Dateisysteme Metadaten verwalten.\n";
    
    // Datei erstellen und schreiben
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei");
        return 1;
    }
    fprintf(file, "%s", content);
    fclose(file);
    
    // Metadaten vor der Änderung anzeigen
    printf("Metadaten vor der Änderung:\n");
    print_file_metadata(filename);
    
    // Datei öffnen und zusätzlichen Inhalt anhängen
    file = fopen(filename, "a");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei zum Anhängen");
        return 1;
    }
    
    // Fügen Sie weiteren Text zur Datei hinzu
    fprintf(file, "Dieser Text wurde nachträglich hinzugefügt.\n");
    fprintf(file, "Dies demonstriert, wie sich Metadaten ändern, wenn Inhalte ergänzt werden.\n");
    
    fclose(file);
    
    // Metadaten nach der Änderung anzeigen
    printf("Metadaten nach der Änderung:\n");
    print_file_metadata(filename);
    
    // Hardlink erstellen
    const char* hardlink_name = "testdatei_hardlink.txt";
    
    // Erstellen Sie einen Hardlink zur Originaldatei
    if (link(filename, hardlink_name) != 0) {
        perror("Fehler beim Erstellen des Hardlinks");
    } else {
        printf("Hardlink erstellt: %s\n", hardlink_name);
    }
    
    // Metadaten des Hardlinks anzeigen
    printf("Metadaten des Hardlinks:\n");
    print_file_metadata(hardlink_name);
    
    // Dateien löschen
    remove(filename);
    remove(hardlink_name);
    
    return 0;
}



Beschreiben Sie die Ausgabe des Programms. Welche Änderungen an den Metadaten beobachten Sie nach dem Anhängen von Text?
Nach der Ausführung des Programms sehen wir folgende Änderungen in den Metadaten:

Dateigröße: Die offensichtlichste Änderung ist die Vergrößerung der Datei. Nach dem Anhängen des zusätzlichen Texts ist die Dateigröße (st_size) angestiegen.
Zeitstempel:

Der Zeitstempel für die "Letzte Änderung" (st_mtime) hat sich aktualisiert, da der Inhalt der Datei geändert wurde.
Der "Letzter Zugriff" Zeitstempel (st_atime) hat sich möglicherweise ebenfalls aktualisiert, abhängig von der Dateisystemkonfiguration und dem Betriebssystem.


Inode-Nummer und Hardlink-Anzahl: Diese bleiben unverändert, da es sich um dieselbe physische Datei handelt. Erst nach dem Erstellen des Hardlinks ändert sich die Anzahl der Hardlinks von 1 auf 2.
Zugriffsrechte: Die Zugriffsrechte bleiben typischerweise unverändert, es sei denn, sie werden explizit geändert.

Erklären Sie den Unterschied zwischen der Inode-Nummer und dem Dateinamen. Was bedeutet es, wenn zwei Dateien die gleiche Inode-Nummer haben?

Inode vs. Dateiname:

Inode-Nummer: Eine eindeutige Identifikationsnummer für eine Datei im Dateisystem. Die Inode enthält alle Metadaten einer Datei (Größe, Besitzer, Zugriffsrechte, Zeitstempel, Position der Dateiblöcke) – außer dem Namen der Datei.
Dateiname: Ein menschenlesbarer Name, der in einem Verzeichniseintrag gespeichert ist und auf einen Inode verweist. Der Dateiname ist nur ein Eintrag im Verzeichnis, der auf den entsprechenden Inode zeigt.


Gleiche Inode-Nummer bei zwei Dateien:

Wenn zwei Dateien die gleiche Inode-Nummer haben, bedeutet dies, dass es sich um Hardlinks zur selben physischen Datei handelt.
Beide Dateinamen verweisen auf denselben Inode und damit auf dieselben physischen Datenblöcke auf der Festplatte.
Änderungen am Inhalt einer Datei werden sofort in allen Hardlinks sichtbar, da sie alle denselben Inode und dieselben Datenblöcke teilen.
Der Inode zählt die Anzahl der Hardlinks, die auf ihn verweisen. Die Datei wird erst physisch gelöscht, wenn der letzte Hardlink entfernt wird und der Zähler auf 0 fällt.



Wie würde sich das Verhalten ändern, wenn Sie statt eines Hardlinks einen symbolischen Link (Symlink) erstellen würden? Beschreiben Sie die Unterschiede in Bezug auf Metadaten und Verhalten beim Löschen der Originaldatei.
Unterschiede zwischen Hardlinks und symbolischen Links (Symlinks):

Metadaten:

Hardlink: Teilt dieselbe Inode-Nummer mit der Originaldatei. Hat identische Metadaten wie die Originaldatei (Größe, Berechtigungen, Zeitstempel).
Symlink: Hat eine eigene Inode-Nummer, die sich von der Originaldatei unterscheidet. Hat eigene Metadaten, wobei die Dateigröße typischerweise der Länge des Pfads zur Zieldatei entspricht.


Dateityp:

Hardlink: Erscheint als normale Datei (Dateityp "-" im ls -l).
Symlink: Erscheint als spezieller Dateityp (Dateityp "l" im ls -l).


Zugriffsrechte:

Hardlink: Hat identische Zugriffsrechte zur Originaldatei.
Symlink: Hat typischerweise Berechtigungen 777 (rwxrwxrwx), aber beim Zugriff werden die Berechtigungen der Zieldatei geprüft.


Verhalten beim Löschen der Originaldatei:

Hardlink: Funktioniert weiterhin normal, da die Datei physisch erst gelöscht wird, wenn der letzte Hardlink entfernt wird. Der Inhalt bleibt über den Hardlink zugänglich.
Symlink: Wird zu einem "gebrochenen" oder "hängenden" Link. Zugriffe auf den Symlink führen zu Fehlern ("No such file or directory"), da der Pfad, auf den er verweist, nicht mehr existiert.


Dateisystemgrenzen:

Hardlink: Kann nur innerhalb desselben Dateisystems/derselben Partition erstellt werden.
Symlink: Kann über Dateisystemgrenzen hinweg erstellt werden und auf Dateien in anderen Partitionen verweisen.


Verweis auf:

Hardlink: Verweist direkt auf denselben Inode (und damit auf dieselben Datenblöcke).
Symlink: Speichert nur den Pfad zur Zieldatei und muss bei jedem Zugriff aufgelöst werden.


Größe:

Hardlink: Hat dieselbe Größe wie die Originaldatei.
Symlink: Nimmt typischerweise nur den Speicherplatz ein, der für den Pfad zur Zieldatei benötigt wird (wenige Bytes).



Um das Programm zu ändern, um statt eines Hardlinks einen symbolischen Link zu erstellen, würde man die link()-Funktion durch symlink() ersetzen:
if (symlink(filename, symlink_name) != 0) {
    perror("Fehler beim Erstellen des symbolischen Links");
}


Wenn die Originaldatei nach dem Erstellen des Symlinks gelöscht würde, würde der Symlink zu einem "toten" Link, während der Hardlink weiterhin funktionsfähig bleibt und Zugriff auf die Daten ermöglicht.
