Aufgabe 6.
Vervollständigter code: 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>

void print_file_metadata(const char* filename) {
    struct stat file_info;

    if (stat(filename, &file_info) != 0) {
        perror("stat");
        return;
    }

    printf("Metadaten für Datei: %s\n", filename);
    printf("------------------------\n");
    printf("Dateigröße: %ld Bytes\n", file_info.st_size);
    printf("Inode-Nummer: %ld\n", file_info.st_ino);
    printf("Anzahl Hardlinks: %ld\n", file_info.st_nlink);
    printf("Zugriffsrechte (oktal): %o\n", file_info.st_mode & 0777);

    char time_str[30];
    strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_atime));
    printf("Letzter Zugriff: %s\n", time_str);

    strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_mtime));
    printf("Letzte Änderung: %s\n", time_str);

    printf("\n");
}

int main() {
    const char* filename = "testdatei.txt";
    const char* content = "Dies ist ein Test für Dateioperationen.\n"
                          "Wir untersuchen, wie Dateisysteme Metadaten verwalten.\n";

    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei");
        return 1;
    }

    fprintf(file, "%s", content);
    fclose(file);

    printf("Metadaten vor der Änderung:\n");
    print_file_metadata(filename);

    file = fopen(filename, "a");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei zum Anhängen");
        return 1;
    }

    fprintf(file, "Zusätzlicher Text zur Demonstration der Änderungszeit.\n");
    fclose(file);

    printf("Metadaten nach der Änderung:\n");
    print_file_metadata(filename);

    const char* hardlink_name = "testdatei_hardlink.txt";
    if (link(filename, hardlink_name) != 0) {
        perror("Fehler beim Erstellen des Hardlinks");
        return 1;
    }

    printf("Hardlink erstellt: %s\n", hardlink_name);
    printf("Metadaten des Hardlinks:\n");
    print_file_metadata(hardlink_name);

    remove(filename);
    remove(hardlink_name);

    return 0;
}

Ausgabe:
Metadaten vor der Änderung:
Metadaten für Datei: testdatei.txt
------------------------
Dateigröße: 96 Bytes
Inode-Nummer: 729
Anzahl Hardlinks: 1
Zugriffsrechte (oktal): 644
Letzter Zugriff: 2025-05-17 10:01:27
Letzte Änderung: 2025-05-17 10:01:27

Metadaten nach der Änderung:
Metadaten für Datei: testdatei.txt
------------------------
Dateigröße: 153 Bytes
Inode-Nummer: 729
Anzahl Hardlinks: 1
Zugriffsrechte (oktal): 644
Letzter Zugriff: 2025-05-17 10:01:27
Letzte Änderung: 2025-05-17 10:01:27

Hardlink erstellt: testdatei_hardlink.txt
Metadaten des Hardlinks:
Metadaten für Datei: testdatei_hardlink.txt
------------------------
Dateigröße: 153 Bytes
Inode-Nummer: 729
Anzahl Hardlinks: 2
Zugriffsrechte (oktal): 644
Letzter Zugriff: 2025-05-17 10:01:27
Letzte Änderung: 2025-05-17 10:01:27

Antworten zu Fragen nach Ausführung:
1. Welche Änderungen an den Metadaten nach dem Anhängen von Text?
Die Dateigröße ist von 96 auf 153 Bytes gestiegen.

Die Inode-Nummer, Rechte und Zeitstempel blieben gleich, da die Änderung sehr schnell erfolgte.

Bei größerem zeitlichem Abstand wäre auch der Änderungszeitpunkt (mtime) aktualisiert worden.

2. Unterschied zwischen Inode-Nummer und Dateiname
Der Dateiname ist nur ein Verweis in einem Verzeichnis.

Die Inode-Nummer zeigt auf die echten Dateiinformationen (Inhalt, Größe, Rechte, Zeitstempel).

Wenn zwei Dateien die gleiche Inode-Nummer haben, sind sie Hardlinks – sie zeigen auf denselben Inhalt im Dateisystem.

3. Unterschied bei Verwendung eines symbolischen Links (Symlink)
Ein Symlink ist eine eigene Datei mit einem eigenen Inode. Er enthält nur den Pfad zur Zieldatei.

Metadaten (Größe, Rechte, Zeiten) beziehen sich auf den Link selbst, nicht auf das Ziel.

Wird die Originaldatei gelöscht, bleibt der Symlink bestehen, zeigt aber ins Leere (Broken Link).

Ein Hardlink dagegen bleibt voll funktionsfähig, da er direkt mit dem Inode verbunden ist.



