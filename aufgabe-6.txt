#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>

void print_file_metadata(const char* filename) {
    struct stat file_info;

    // Stat aufrufen und Fehler prüfen
    if (stat(filename, &file_info) != 0) {
        perror("stat");
        return;
    }

    printf("Metadaten für Datei: %s\n", filename);
    printf("------------------------\n");

    // Dateigrösse in Bytes
    printf("Dateigrösse: %ld Bytes\n", file_info.st_size);

    // Inode-Nummer
    printf("Inode-Nummer: %ld\n", file_info.st_ino);

    // Anzahl Hardlinks
    printf("Anzahl Hardlinks: %ld\n", file_info.st_nlink);

    // Zugriffsrechte (Oktalform)
    printf("Zugriffsrechte: %o\n", file_info.st_mode & 0777);

    // Letzter Zugriff
    char time_str[30];
    strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_atime));
    printf("Letzter Zugriff: %s\n", time_str);

    // Letzte Änderung
    strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&file_info.st_mtime));
    printf("Letzte Änderung: %s\n", time_str);

    printf("\n");
}

int main() {
    const char* filename = "testdatei.txt";
    const char* content = "Dies ist ein Test für Dateioperationen.\n"
                          "Wir untersuchen, wie Dateisysteme Metadaten verwalten.\n";

    // Datei erstellen und schreiben
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei");
        return 1;
    }

    fprintf(file, "%s", content);
    fclose(file);

    // Metadaten vor der Änderung anzeigen
    printf("Metadaten vor der Änderung:\n");
    print_file_metadata(filename);

    // Datei öffnen und zusätzlichen Inhalt anhängen
    file = fopen(filename, "a");
    if (file == NULL) {
        perror("Fehler beim Öffnen der Datei zum Anhängen");
        return 1;
    }

    // Weiterer Text
    fprintf(file, "Dieser Text wurde später angehängt.\n");
    fclose(file);

    // Metadaten nach der Änderung anzeigen
    printf("Metadaten nach der Änderung:\n");
    print_file_metadata(filename);

    // Hardlink erstellen
    const char* hardlink_name = "testdatei_hardlink.txt";
    if (link(filename, hardlink_name) != 0) {
        perror("Fehler beim Erstellen des Hardlinks");
    } else {
        printf("Hardlink erstellt: %s\n", hardlink_name);
    }

    // Metadaten des Hardlinks anzeigen
    printf("Metadaten des Hardlinks:\n");
    print_file_metadata(hardlink_name);

    // Dateien löschen
    remove(filename);
    remove(hardlink_name);

    return 0;
}
Metadaten vor der Änderung:
Metadaten für Datei: testdatei.txt
------------------------
Dateigrösse: 96 Bytes
Inode-Nummer: 533405
Anzahl Hardlinks: 1
Zugriffsrechte: 664
Letzter Zugriff: 2025-05-10 09:06:30
Letzte Änderung: 2025-05-10 09:06:30

Metadaten nach der Änderung:
Metadaten für Datei: testdatei.txt
------------------------
Dateigrösse: 134 Bytes
Inode-Nummer: 533405
Anzahl Hardlinks: 1
Zugriffsrechte: 664
Letzter Zugriff: 2025-05-10 09:06:30
Letzte Änderung: 2025-05-10 09:06:30

Hardlink erstellt: testdatei_hardlink.txt
Metadaten des Hardlinks:
Metadaten für Datei: testdatei_hardlink.txt
------------------------
Dateigrösse: 134 Bytes
Inode-Nummer: 533405
Anzahl Hardlinks: 2
Zugriffsrechte: 664
Letzter Zugriff: 2025-05-10 09:06:30
Letzte Änderung: 2025-05-10 09:06:30

Aufgaben nach der Ausführung – Aufgabe 6.1

1. Beschreiben Sie die Ausgabe des Programms. Welche Änderungen an den Metadaten beobachten Sie nach dem Anhängen von Text?

Nach dem Anhängen von Text an die Datei testdatei.txt ändern sich folgende Metadaten:
- Die Dateigröße nimmt zu (im Beispiel von 96 Bytes auf 134 Bytes).
- Die Zeitstempel für Letzter Zugriff und Letzte Änderung werden aktualisiert.
- Die Anzahl der Hardlinks bleibt unverändert, solange kein zusätzlicher Link erstellt wurde.
Diese Änderungen zeigen, dass das Dateisystem genau Buch über Dateiaktivitäten führt und Metadaten wie Größe und Zeit automatisch aktualisiert.

2. Erklären Sie den Unterschied zwischen der Inode-Nummer und dem Dateinamen. Was bedeutet es, wenn zwei Dateien die gleiche Inode-Nummer haben?

Der Dateiname ist lediglich ein Verzeichniseintrag, der auf einen Inode zeigt. Der Inode selbst enthält die tatsächlichen Metadaten und den Speicherort der Datei.
Wenn zwei Dateien die gleiche Inode-Nummer haben, bedeutet das:
- Beide Dateien zeigen auf denselben Inode und somit auf denselben Inhalt.
- Es handelt sich um sogenannte Hardlinks.
- Änderungen an einer Datei wirken sich sofort auf die andere aus, da sie intern dieselbe Datei sind.

3. Wie würde sich das Verhalten ändern, wenn Sie statt eines Hardlinks einen symbolischen Link (Symlink) erstellen würden? Beschreiben Sie die Unterschiede in Bezug auf Metadaten und Verhalten beim Löschen der Originaldatei.

Ein symbolischer Link:
- Verweist auf den Pfad der Zieldatei, nicht direkt auf deren Inode.
- Hat eine eigene Inode-Nummer und eigene Metadaten.
- Wenn die Originaldatei gelöscht wird, zeigt der Symlink ins Leere (sog. broken link).
- Änderungen an der Originaldatei sind weiterhin über den Symlink sichtbar – solange die Zieldatei existiert.
Im Gegensatz dazu bleibt bei einem Hardlink die Datei erhalten, solange mindestens ein Link auf den Inode verweist.

